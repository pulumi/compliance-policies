<%~ includeFile("spec.eta", { policiesImportPath: it.policiesImportPath }) %>
import { getResourceValidationArgs } from "./resource";

describe("<%= it.policyFullVariableName %>", function() {
    const policy = policies.<%= it.policyFullVariableName %>;

    it("name", async function() {
        assertResourcePolicyName(policy, "<%= it.policyName %>");
    });

    it("registration", async function() {
        assertResourcePolicyIsRegistered(policy);
    });

    it("metadata", async function() {
        assertResourcePolicyRegistrationDetails(policy, {
            vendors: ["azure"],
            services: <%~ it.metadataServices %>,
            severity: "medium",
            topics: ["api", "unstable", "preview"],
        });
    });

    it("enforcementLevel", async function() {
        assertResourcePolicyEnforcementLevel(policy);
    });

    it("description", async function() {
        assertResourcePolicyDescription(policy);
    });

    it("code", async function () {
        assertCodeQuality(this.test?.parent?.title, __filename);
    });

    it("policy-config-include", async function () {
        const args = getResourceValidationArgs("corp-resource", {
            excludeFor: [ "corp-.*" ],
            ignoreCase: false,
            includeFor: [ "my-.*", "corp-resource" ],
        });
        await assertHasResourceViolation(policy, args, { message: "Azure <%~ it.shortResourceType %> shouldn't use an unstable API (<%~ it.resourceType %>).<% if (it.resourceTypeAlias !== "") { %> A compatible replacement can be found at '<%~ it.resourceTypeAlias %>'.<% } %>" });
    });

    it("policy-config-exclude", async function () {
        const args = getResourceValidationArgs("corp-resource", {
            excludeFor: [ "corp-.*" ],
            ignoreCase: false,
            includeFor: [ "my-.*", "some-resource" ],
        });
        await assertNoResourceViolations(policy, args);
    });

    it("#1", async function() {
        const args = getResourceValidationArgs();
        await assertHasResourceViolation(policy, args, { message: "Azure <%~ it.shortResourceType %> shouldn't use an unstable API (<%~ it.resourceType %>).<% if (it.resourceTypeAlias !== "") { %> A compatible replacement can be found at '<%~ it.resourceTypeAlias %>'.<% } %>" });
    });
});
